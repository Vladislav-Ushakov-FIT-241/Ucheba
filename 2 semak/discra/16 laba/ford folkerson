def ford_folkerson(graph, source, stock):
    n = len(graph)
    residual_graph = [row[:] for row in graph]
    max_flow = 0

    while True:
        path = bfs(residual_graph, source, stock)

        if not path:
            break

        path_flow = float('inf')
        s = stock
        while s != source:
            u = path[s]
            path_flow = min(path_flow, residual_graph[u][s])
            s = u

        s = stock
        while s != source:
            u = path[s]
            residual_graph[u][s] -= path_flow
            residual_graph[s][u] += path_flow
            s = u

        max_flow += path_flow

    return max_flow


def bfs(graph, source, stock):

    n = len(graph)
    visited = [False] * n
    queue = [source]
    visited[source] = True
    path = {}

    while queue:
        u = queue.pop(0)

        for v in range(n):
            if not visited[v] and graph[u][v] > 0:
                queue.append(v)
                visited[v] = True
                path[v] = u

                if v == stock:
                    return path

    return None

#Вариант 23
graph = [
    [0, 42, 15, 0, 0, 0],
    [0, 0, 5, 0, 33, 56],
    [0, 0, 0, 25, 15, 0],
    [0, 14, 0, 0, 0, 14],
    [0, 0, 0, 13, 0, 41],
    [0, 0, 0, 0, 0, 0]
]

source = 0  #Исток
stock = 5  #Сток

max_flow = ford_folkerson(graph, source, stock)
print("Максимальный поток:", max_flow)
