def solve(f):
    line = f.readline().split()
    n, m = int(line[0]), int(line[1])

    edges = []
    for _ in range(m):
        line = f.readline().split()
        s, e, l = int(line[0]), int(line[1]), int(line[2])
        edges.append((s - 1, e - 1, l))
        edges.append((e - 1, s - 1, l))

    def floyd_warshall():
        dist = [[float('inf')] * n for _ in range(n)]
        for i in range(n):
            dist[i][i] = 0
        for s, e, l in edges:
            dist[s][e] = l

        for k in range(n):
            for i in range(n):
                for j in range(n):
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
        return dist

    distances = floyd_warshall()

    best_building = -1
    min_max_distance = float('inf')

    for i in range(n):
        max_distance = max(distances[i])

        if max_distance < min_max_distance:
            min_max_distance = max_distance
            best_building = i + 1
        elif max_distance == min_max_distance and i + 1 < best_building:
            best_building = i + 1

    return best_building

with open("test.txt", "r") as f:
    result = solve(f)
print(result)

