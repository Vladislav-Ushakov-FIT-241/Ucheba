using System;
using System.Collections.Generic;

class Subscriber
{
    public string Name { get; set; }
    public List<string> PhoneNumbers { get; set; }
    public string Operator { get; set; }
    public int Year { get; set; }
    public string City { get; set; }

    public Subscriber(string name, List<string> phoneNumbers, string operatorName, int year, string city)
    {
        Name = name;
        PhoneNumbers = phoneNumbers;
        Operator = operatorName;
        Year = year;
        City = city;
    }

    public override string ToString()
    {
        return $"Имя: {Name}, Номер: {string.Join(", ", PhoneNumbers)}, Оператор: {Operator}, Год: {Year}, Город: {City}";
    }
}

class PhoneDirectory
{
    private List<Subscriber> subscribers = new List<Subscriber>();

    public void AddSubscriber()
    {
        Console.Write("Введите имя абонента: ");
        string name = Console.ReadLine();

        Console.Write("Введите номер телефона (можно несколько через запятую): ");
        List<string> phoneNumbers = new List<string>(Console.ReadLine().Split(','));

        Console.Write("Введите оператора: ");
        string operatorName = Console.ReadLine();

        Console.Write("Введите год подключения: ");
        int year = int.Parse(Console.ReadLine());

        Console.Write("Введите город: ");
        string city = Console.ReadLine();

        Subscriber subscriber = new Subscriber(name, phoneNumbers, operatorName, year, city);
        subscribers.Add(subscriber);

        Console.WriteLine("Абонент добавлен");
    }

    public void FindByOperator()
    {
        Console.Write("Введите оператора для поиска: ");
        string operatorName = Console.ReadLine();
        var results = subscribers.FindAll(s => s.Operator.Equals(operatorName, StringComparison.OrdinalIgnoreCase));

        if (results.Count > 0)
        {
            foreach (var subscriber in results)
            {
                Console.WriteLine("Найденные абоненты:");
                Console.WriteLine(subscriber);
            }
        }
        else
        {
            Console.WriteLine("Абоненты не найдены");
        }
    }

    public void FindByYear()
    {
        Console.Write("Введите год подключения для поиска: ");
        int year = int.Parse(Console.ReadLine());
        var results = subscribers.FindAll(s => s.Year == year);

        if (results.Count > 0)
        {
            foreach (var subscriber in results)
            {
                Console.WriteLine(subscriber);
            }
        }
        else
        {
            Console.WriteLine("Абоненты не найдены");
        }
    }

    public void FindByPhoneNumber()
    {
        Console.Write("Введите номер телефона для поиска: ");
        string phoneNumber = Console.ReadLine();
        var results = subscribers.FindAll(s => s.PhoneNumbers.Contains(phoneNumber.Trim()));

        if (results.Count > 0)
        {
            foreach (var subscriber in results)
            {
                Console.WriteLine(subscriber);
            }
        }
        else
        {
            Console.WriteLine("Абоненты не найдены");
        }
    }

    public void Menu()
    {
        while (true)
        {
            Console.WriteLine("\nМеню:");
            Console.WriteLine("1. Добавить абонента");
            Console.WriteLine("2. Найти абонента по оператору");
            Console.WriteLine("3. Найти абонента по году подключения");
            Console.WriteLine("4. Найти абонента по номеру телефона");
            Console.WriteLine("5. Выход");

            Console.Write("Выберите опцию (1-5): ");
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    AddSubscriber();
                    break;
                case "2":
                    FindByOperator();
                    break;
                case "3":
                    FindByYear();
                    break;
                case "4":
                    FindByPhoneNumber();
                    break;
                case "5":
                    Console.WriteLine("Выход");
                    return; 
                default:
                    Console.WriteLine("Некорректный выбор. Пожалуйста, попробуйте снова");
                    break;
            }
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        PhoneDirectory directory = new PhoneDirectory();
        directory.Menu();
    }
}
